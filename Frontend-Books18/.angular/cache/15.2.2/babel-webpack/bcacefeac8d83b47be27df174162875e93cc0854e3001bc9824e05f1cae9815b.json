{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BookService = /*#__PURE__*/(() => {\n  class BookService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.apiUrl;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    getEndpointUrl(id) {\n      return id ? `${this.apiUrl}/${id}` : this.apiUrl;\n    }\n    // GET: Obter todos os livros\n    getAllBooks() {\n      return this.http.get(this.apiUrl);\n    }\n    // GET: para ordenar por Crescente ou Descrecente títulos, autor ou edição\n    getBooksOrderBy(orderCriteria) {\n      const url = orderCriteria ? `${this.apiUrl}/Ordered?orderCriteria=${orderCriteria}` : this.apiUrl;\n      return this.http.get(url);\n    }\n    // GET: Obter um livro específico pelo ID\n    getBookById(id) {\n      return this.http.get(this.getEndpointUrl(id));\n    }\n    // POST: Criar um novo livro\n    addBook(book) {\n      return this.http.post(this.apiUrl, book, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    createBook(book) {\n      return this.http.post(this.apiUrl, book, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      console.error('An error occurred:', error);\n      return throwError(error);\n    }\n    // PUT: Atualizar um livro existente\n    updateBook(id, book) {\n      return this.http.put(this.getEndpointUrl(id), book);\n    }\n    // DELETE: Excluir um livro\n    deleteBook(id) {\n      return this.http.delete(this.getEndpointUrl(id));\n    }\n  }\n  BookService.ɵfac = function BookService_Factory(t) {\n    return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  BookService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookService,\n    factory: BookService.ɵfac,\n    providedIn: 'root'\n  });\n  return BookService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}